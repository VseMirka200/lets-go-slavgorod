package com.example.lets_go_slavgorod.ui.screens

import android.content.Intent
import android.os.Build
import androidx.annotation.RequiresApi
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.automirrored.filled.ArrowForward
import androidx.compose.material.icons.filled.CheckCircle
import androidx.compose.material.icons.filled.Close
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material.icons.filled.Download
import androidx.compose.material.icons.filled.Error
import androidx.compose.material.icons.filled.ExpandLess
import androidx.compose.material.icons.filled.ExpandMore
import androidx.compose.material.icons.filled.Favorite
import androidx.compose.material.icons.filled.Feedback
import androidx.compose.material.icons.filled.Info
import androidx.compose.material.icons.filled.NotificationsOff
import androidx.compose.material.icons.filled.Palette
import androidx.compose.material.icons.filled.PhoneAndroid
import androidx.compose.material.icons.filled.Star
import androidx.compose.material.icons.filled.Update
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Button
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.RadioButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Switch
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextDecoration
import androidx.compose.ui.unit.dp
import androidx.core.net.toUri
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import com.example.lets_go_slavgorod.R
import com.example.lets_go_slavgorod.ui.viewmodel.AppTheme
import com.example.lets_go_slavgorod.ui.viewmodel.ContextViewModelFactory
import com.example.lets_go_slavgorod.ui.viewmodel.DataManagementViewModel
import com.example.lets_go_slavgorod.ui.viewmodel.DisplaySettingsViewModel
import com.example.lets_go_slavgorod.ui.viewmodel.QuietMode
import com.example.lets_go_slavgorod.ui.viewmodel.QuietModeViewModel
import com.example.lets_go_slavgorod.ui.viewmodel.RouteDisplayMode
import com.example.lets_go_slavgorod.ui.viewmodel.ThemeViewModel
import com.example.lets_go_slavgorod.ui.viewmodel.UpdateMode
import com.example.lets_go_slavgorod.ui.viewmodel.UpdateSettingsViewModel
import com.example.lets_go_slavgorod.ui.viewmodel.VibrationSettingsViewModel
import com.example.lets_go_slavgorod.utils.Constants
import timber.log.Timber

/**
 * –≠–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * 
 * –í–µ—Ä—Å–∏—è: 3.0
 * –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –û–∫—Ç—è–±—Ä—å 2025
 * 
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 * –î–æ—Å—Ç—É–ø–µ–Ω –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ —á–µ—Ä–µ–∑ –∏–∫–æ–Ω–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —à–∞–ø–∫–µ.
 * 
 * –ò–∑–º–µ–Ω–µ–Ω–∏—è v3.0:
 * - –í—Å–µ —Ä–∞–∑–¥–µ–ª—ã —Ç–µ–ø–µ—Ä—å —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—ã–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–≤–µ—Ä–Ω—É—Ç—ã)
 * - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä—è–º–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 * - –î–æ–±–∞–≤–ª–µ–Ω—ã –∏–∫–æ–Ω–∫–∏ ExpandLess/ExpandMore –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–∏
 * - –ö–ª–∏–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É —Ä–∞–∑–¥–µ–ª–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –µ–≥–æ
 * - –£–¥–∞–ª–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω AboutScreen
 * 
 * –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—ã–µ —Ä–∞–∑–¥–µ–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫:
 * 
 * 1. **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã** üé®
 *    - –í—ã–±–æ—Ä —Ç–µ–º—ã: –°–∏—Å—Ç–µ–º–Ω–∞—è / –°–≤–µ—Ç–ª–∞—è / –¢–µ–º–Ω–∞—è
 *    - –ú–æ–¥–∞–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞
 *    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã
 * 
 * 2. **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è** üì±
 *    - –†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤: –ö–ª–µ—Ç–∫–∞ / –°–ø–∏—Å–æ–∫
 *    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Å–µ—Ç–∫–µ: 1-4 (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ "–ö–ª–µ—Ç–∫–∞")
 *    - –ú–æ–¥–∞–ª—å–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –≤—ã–±–æ—Ä–∞
 * 
 * 3. **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π** üîÑ
 *    - –†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ / –í—Ä—É—á–Ω—É—é / –û—Ç–∫–ª—é—á–µ–Ω–æ
 *    - –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 *    - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
 *    - –ú–æ–¥–∞–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
 *    - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å changelog
 * 
 * 4. **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π** üîî
 *    - –†–µ–∂–∏–º "–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å": –í—ã–∫–ª—é—á–µ–Ω / –í—Å–µ–≥–¥–∞ / –ù–∞ N –¥–Ω–µ–π / –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π
 *    - –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
 *    - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–±—Ä–∞—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 *    - –ú–æ–¥–∞–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
 * 
 * 5. **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏** üíæ
 *    - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ GitHub
 *    - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
 *    - –°–±—Ä–æ—Å –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 *    - –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 *    - –î–∏–∞–ª–æ–≥–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –æ–ø–∞—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 * 
 * 6. **–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏** ‚ÑπÔ∏è
 *    - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ –≤–µ—Ä—Å–∏–∏
 *    - –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ VK
 *    - –§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (Telegram)
 *    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (–¥–æ–Ω–∞—Ç—ã, –∑–≤–µ–∑–¥–∞ –Ω–∞ GitHub)
 *    - –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
 * 
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
 * - –í—Å–µ –≤—ã–ø–∞–¥–∞—é—â–∏–µ –º–µ–Ω—é —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –º–æ–¥–∞–ª—å–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ —Å —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∞–º–∏
 * - –°–æ—Å—Ç–æ—è–Ω–∏—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ remember
 * - –î–∏–∞–ª–æ–≥–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫
 * - –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å—Ç–∫–∞ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
 * 
 * @param navController –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å null)
 * @param modifier –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
 * @param themeViewModel ViewModel –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @param updateSettingsViewModel ViewModel –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * 
 * @author VseMirka200
 * @version 3.0
 * @since 1.0
 */
@RequiresApi(Build.VERSION_CODES.O)
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SettingsScreen(
    navController: NavController? = null,
    modifier: Modifier = Modifier,
    themeViewModel: ThemeViewModel = viewModel(),
    updateSettingsViewModel: UpdateSettingsViewModel? = null,
) {
    val context = LocalContext.current
    
    val displaySettingsViewModel: DisplaySettingsViewModel = viewModel(
        factory = ContextViewModelFactory.create(context) { DisplaySettingsViewModel(it) }
    )
    val updateSettingsVM = updateSettingsViewModel ?: viewModel(
        factory = ContextViewModelFactory.create(context) { UpdateSettingsViewModel(it) }
    )
    
    val quietModeViewModel: QuietModeViewModel = viewModel(
        factory = ContextViewModelFactory.create(context) { QuietModeViewModel(it) }
    )
    
    val dataManagementViewModel: DataManagementViewModel = viewModel(
        factory = ContextViewModelFactory.create(context) { DataManagementViewModel(it) }
    )
    
    val vibrationSettingsViewModel: VibrationSettingsViewModel = viewModel(
        factory = ContextViewModelFactory.create(context) { VibrationSettingsViewModel(it) }
    )
    
    val currentAppTheme by themeViewModel.currentTheme.collectAsState()
    var showThemeDropdown by remember { mutableStateOf(false) }
    val themeOptions = listOf(
        AppTheme.SYSTEM to stringResource(R.string.theme_system),
        AppTheme.LIGHT to stringResource(R.string.theme_light),
        AppTheme.DARK to stringResource(R.string.theme_dark)
    )

    // Quiet mode state
    val currentQuietMode by quietModeViewModel.quietMode.collectAsState()
    var showQuietModeDropdown by remember { mutableStateOf(false) }
    val quietModeOptions = remember { QuietMode.entries.toTypedArray() }
    
    // Update settings state
    val currentUpdateMode by updateSettingsVM.currentUpdateMode.collectAsState(initial = UpdateMode.AUTOMATIC)
    var showUpdateModeDropdown by remember { mutableStateOf(false) }
    val updateModeOptions = remember { UpdateMode.entries.toTypedArray() }
    val isCheckingUpdates by updateSettingsVM.isCheckingUpdates.collectAsState(initial = false)
    val updateCheckError by updateSettingsVM.updateCheckError.collectAsState(initial = null)
    val updateCheckStatus by updateSettingsVM.updateCheckStatus.collectAsState(initial = null)
    val lastUpdateCheckTime by updateSettingsVM.lastUpdateCheckTime.collectAsState(initial = 0L)
    val availableUpdateVersion by updateSettingsVM.availableUpdateVersion.collectAsState(initial = null)
    val availableUpdateUrl by updateSettingsVM.availableUpdateUrl.collectAsState(initial = null)
    val availableUpdateNotes by updateSettingsVM.availableUpdateNotes.collectAsState(initial = null)
    

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    val currentDisplayMode by displaySettingsViewModel.displayMode.collectAsState(initial = RouteDisplayMode.GRID)
    val currentGridColumns by displaySettingsViewModel.gridColumns.collectAsState(initial = 2)
    var showDisplayModeDropdown by remember { mutableStateOf(false) }
    var showColumnsDropdown by remember { mutableStateOf(false) }
    val displayModeOptions = listOf(
        RouteDisplayMode.GRID to "–ö–ª–µ—Ç–∫–∞",
        RouteDisplayMode.LIST to "–°–ø–∏—Å–æ–∫"
    )
    val columnsOptions = listOf(
        1 to "1 –∫–æ–ª–æ–Ω–∫–∞",
        2 to "2 –∫–æ–ª–æ–Ω–∫–∏", 
        3 to "3 –∫–æ–ª–æ–Ω–∫–∏",
        4 to "4 –∫–æ–ª–æ–Ω–∫–∏"
    )

    var showResetSettingsDialog by remember { mutableStateOf(false) }
    var showClearCacheDialog by remember { mutableStateOf(false) }
    var cacheCleared by remember { mutableStateOf(false) }
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    val developerName = stringResource(id = R.string.developer_name)
    val developerVkUrl = stringResource(id = R.string.developer_vk_url)
    val telegramUrl = stringResource(id = R.string.feedback_telegram_url)
    val appVersion = Constants.APP_VERSION
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ —Å–≤–µ—Ä–Ω—É—Ç—ã)
    var isThemeSectionExpanded by remember { mutableStateOf(false) }
    var isDisplaySectionExpanded by remember { mutableStateOf(false) }
    var isUpdateSectionExpanded by remember { mutableStateOf(false) }
    var isNotificationSectionExpanded by remember { mutableStateOf(false) }
    var isVibrationSectionExpanded by remember { mutableStateOf(false) }
    var isDataSectionExpanded by remember { mutableStateOf(false) }
    var isAboutSectionExpanded by remember { mutableStateOf(false) }

        Scaffold(
        modifier = Modifier.fillMaxSize(),
        topBar = {
            TopAppBar(
                title = {
                    Text(
                        text = stringResource(R.string.settings_screen_title),
                        style = MaterialTheme.typography.titleLarge.copy(fontWeight = FontWeight.Bold)
                    )
                },
                navigationIcon = {
                    IconButton(onClick = { navController?.popBackStack() }) {
                        Icon(
                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,
                            contentDescription = "–ù–∞–∑–∞–¥",
                            tint = MaterialTheme.colorScheme.onPrimaryContainer
                        )
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primaryContainer,
                    titleContentColor = MaterialTheme.colorScheme.onPrimaryContainer,
                    navigationIconContentColor = MaterialTheme.colorScheme.onPrimaryContainer
                ),
                windowInsets = WindowInsets(0)
            )
        },
        contentWindowInsets = WindowInsets(0)
    ) { innerPadding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(innerPadding)
                .padding(horizontal = 16.dp)
                .verticalScroll(rememberScrollState())
        ) {
            Spacer(Modifier.height(16.dp))
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã"
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .clickable { isThemeSectionExpanded = !isThemeSectionExpanded }
                    .padding(bottom = 12.dp),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
            Text(
                text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã",
                style = MaterialTheme.typography.titleMedium.copy(
                        fontWeight = FontWeight.Bold
                    ),
                    color = MaterialTheme.colorScheme.primary
                )
                Icon(
                    imageVector = if (isThemeSectionExpanded) Icons.Filled.ExpandLess else Icons.Filled.ExpandMore,
                    contentDescription = if (isThemeSectionExpanded) "–°–≤–µ—Ä–Ω—É—Ç—å" else "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å",
                    tint = MaterialTheme.colorScheme.primary
                )
            }
            
            if (isThemeSectionExpanded) {
            ThemeSettingsCard(
                currentAppTheme = currentAppTheme,
                showThemeDropdown = showThemeDropdown,
                onShowThemeDropdownChange = { showThemeDropdown = it },
                themeOptions = themeOptions,
                onThemeSelected = { theme ->
                    themeViewModel.setTheme(theme)
                }
            )
            }

            Spacer(Modifier.height(24.dp))

            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ "–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .clickable { isDisplaySectionExpanded = !isDisplaySectionExpanded }
                    .padding(bottom = 12.dp),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
            Text(
                text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                style = MaterialTheme.typography.titleMedium.copy(
                        fontWeight = FontWeight.Bold
                    ),
                    color = MaterialTheme.colorScheme.primary
                )
                Icon(
                    imageVector = if (isDisplaySectionExpanded) Icons.Filled.ExpandLess else Icons.Filled.ExpandMore,
                    contentDescription = if (isDisplaySectionExpanded) "–°–≤–µ—Ä–Ω—É—Ç—å" else "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å",
                    tint = MaterialTheme.colorScheme.primary
                )
            }
            
            if (isDisplaySectionExpanded) {
            DisplaySettingsCard(
                currentDisplayMode = currentDisplayMode,
                currentGridColumns = currentGridColumns,
                showDisplayModeDropdown = showDisplayModeDropdown,
                onShowDisplayModeDropdownChange = { showDisplayModeDropdown = it },
                displayModeOptions = displayModeOptions,
                onDisplayModeSelected = { mode ->
                    displaySettingsViewModel.setDisplayMode(mode)
                },
                onColumnsSelected = { columns ->
                    displaySettingsViewModel.setGridColumns(columns)
                },
                showColumnsDropdown = showColumnsDropdown,
                onShowColumnsDropdownChange = { showColumnsDropdown = it },
                columnsOptions = columnsOptions
            )
            }

            Spacer(Modifier.height(16.dp))
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è"
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .clickable { isUpdateSectionExpanded = !isUpdateSectionExpanded }
                    .padding(bottom = 12.dp),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
            Text(
                text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π",
                style = MaterialTheme.typography.titleMedium.copy(
                        fontWeight = FontWeight.Bold
                    ),
                    color = MaterialTheme.colorScheme.primary
                )
                Icon(
                    imageVector = if (isUpdateSectionExpanded) Icons.Filled.ExpandLess else Icons.Filled.ExpandMore,
                    contentDescription = if (isUpdateSectionExpanded) "–°–≤–µ—Ä–Ω—É—Ç—å" else "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å",
                    tint = MaterialTheme.colorScheme.primary
                )
            }
            
            if (isUpdateSectionExpanded) {
            UpdateSettingsCard(
                currentUpdateMode = currentUpdateMode,
                showUpdateModeDropdown = showUpdateModeDropdown,
                onShowUpdateModeDropdownChange = { showUpdateModeDropdown = it },
                updateModeOptions = updateModeOptions,
                onUpdateModeSelected = { mode ->
                    updateSettingsVM.setUpdateMode(mode)
                },
                isCheckingUpdates = isCheckingUpdates,
                updateCheckError = updateCheckError,
                updateCheckStatus = updateCheckStatus,
                lastUpdateCheckTime = lastUpdateCheckTime,
                availableUpdateVersion = availableUpdateVersion,
                availableUpdateUrl = availableUpdateUrl,
                availableUpdateNotes = availableUpdateNotes,
                onCheckForUpdates = {
                    updateSettingsVM.checkForUpdates()
                },
                onClearAvailableUpdate = {
                    updateSettingsVM.clearAvailableUpdate()
                },
                onClearUpdateStatus = {
                    updateSettingsVM.clearUpdateCheckStatus()
                },
                onDownloadUpdate = { url ->
                    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ
                    val intent = android.content.Intent(android.content.Intent.ACTION_VIEW, url.toUri())
                    try {
                        context.startActivity(intent)
                    } catch (e: Exception) {
                        Timber.e(e, "Failed to open update URL")
                    }
                }
            )
            }

            Spacer(Modifier.height(24.dp))

            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .clickable { isNotificationSectionExpanded = !isNotificationSectionExpanded }
                    .padding(bottom = 12.dp),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
            Text(
                text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                style = MaterialTheme.typography.titleMedium.copy(
                        fontWeight = FontWeight.Bold
                    ),
                    color = MaterialTheme.colorScheme.primary
                )
                Icon(
                    imageVector = if (isNotificationSectionExpanded) Icons.Filled.ExpandLess else Icons.Filled.ExpandMore,
                    contentDescription = if (isNotificationSectionExpanded) "–°–≤–µ—Ä–Ω—É—Ç—å" else "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å",
                    tint = MaterialTheme.colorScheme.primary
                )
            }
            
            if (isNotificationSectionExpanded) {
            QuietModeSettingsCard(
                currentQuietMode = currentQuietMode,
                showQuietModeDropdown = showQuietModeDropdown,
                onShowQuietModeDropdownChange = { showQuietModeDropdown = it },
                quietModeOptions = quietModeOptions,
                customDays = quietModeViewModel.customDays.collectAsState().value,
                onQuietModeSelected = { mode, days ->
                    quietModeViewModel.setQuietMode(mode, days)
                }
            )
                
                Spacer(Modifier.height(16.dp))
                
                // –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–±—Ä–∞—Ü–∏–∏ (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: collect –æ–¥–∏–Ω —Ä–∞–∑)
                val vibrationEnabled by vibrationSettingsViewModel.vibrationEnabled.collectAsState()
                VibrationSettingsCard(
                    vibrationEnabled = vibrationEnabled,
                    onVibrationToggle = { enabled ->
                        vibrationSettingsViewModel.setVibrationEnabled(enabled)
                    }
                )
            }
            
            Spacer(Modifier.height(24.dp))

            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏"
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .clickable { isDataSectionExpanded = !isDataSectionExpanded }
                    .padding(bottom = 12.dp),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏",
                    style = MaterialTheme.typography.titleMedium.copy(
                        fontWeight = FontWeight.Bold
                    ),
                    color = MaterialTheme.colorScheme.primary
                )
                Icon(
                    imageVector = if (isDataSectionExpanded) Icons.Filled.ExpandLess else Icons.Filled.ExpandMore,
                    contentDescription = if (isDataSectionExpanded) "–°–≤–µ—Ä–Ω—É—Ç—å" else "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å",
                    tint = MaterialTheme.colorScheme.primary
                )
            }
            
            if (isDataSectionExpanded) {
                // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: collect –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                val isRefreshing by dataManagementViewModel.isRefreshingSchedule.collectAsState()
                val refreshError by dataManagementViewModel.scheduleRefreshError.collectAsState()
                val refreshSuccess by dataManagementViewModel.scheduleRefreshSuccess.collectAsState()
                val dataVersion by dataManagementViewModel.dataVersion.collectAsState()
                val dataLastUpdated by dataManagementViewModel.dataLastUpdated.collectAsState()
                
                ScheduleUpdateCard(
                    isRefreshing = isRefreshing,
                    refreshError = refreshError,
                    refreshSuccess = refreshSuccess,
                    dataVersion = dataVersion,
                    dataLastUpdated = dataLastUpdated,
                    onRefresh = {
                        dataManagementViewModel.refreshScheduleFromGitHub()
                    },
                    onClearStatus = {
                        dataManagementViewModel.clearScheduleRefreshStatus()
                    }
                )
                
                Spacer(Modifier.height(24.dp))

                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–¥—Å–µ–∫—Ü–∏–∏ "–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫"
            Text(
                text = "–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                style = MaterialTheme.typography.titleMedium.copy(
                        fontWeight = FontWeight.Bold
                ),
                color = MaterialTheme.colorScheme.primary,
                modifier = Modifier.padding(bottom = 12.dp)
            )
            
            ResetSettingsCard(
                onResetSettings = { showResetSettingsDialog = true }
            )
            
            Spacer(Modifier.height(12.dp))
            
            ClearCacheCard(
                onClearCache = { showClearCacheDialog = true },
                cacheCleared = cacheCleared
            )
            }

            Spacer(Modifier.height(24.dp))
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ "–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .clickable { isAboutSectionExpanded = !isAboutSectionExpanded }
                    .padding(bottom = 12.dp),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
            Text(
                text = "–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏",
                style = MaterialTheme.typography.titleMedium.copy(
                        fontWeight = FontWeight.Bold
                    ),
                    color = MaterialTheme.colorScheme.primary
                )
                Icon(
                    imageVector = if (isAboutSectionExpanded) Icons.Filled.ExpandLess else Icons.Filled.ExpandMore,
                    contentDescription = if (isAboutSectionExpanded) "–°–≤–µ—Ä–Ω—É—Ç—å" else "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å",
                    tint = MaterialTheme.colorScheme.primary
                )
            }
            
            if (isAboutSectionExpanded) {
                // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    elevation = CardDefaults.cardElevation(defaultElevation = 1.dp)
                ) {
                    Column(
                        modifier = Modifier.padding(16.dp),
                        verticalArrangement = Arrangement.spacedBy(8.dp)
                    ) {
                        Text(
                            text = stringResource(id = R.string.app_name),
                            style = MaterialTheme.typography.bodyLarge.copy(fontWeight = FontWeight.Bold)
                        )
                        
                        Row(
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Text(
                                text = "–†–∞–∑—Ä–∞–±–æ—Ç–∞–ª:",
                                style = MaterialTheme.typography.bodyMedium,
                                color = MaterialTheme.colorScheme.onSurfaceVariant
                            )
                            Spacer(Modifier.width(8.dp))
                            Text(
                                text = developerName,
                                style = MaterialTheme.typography.bodyMedium.copy(
                                    fontWeight = FontWeight.Medium,
                                    textDecoration = TextDecoration.Underline
                ),
                color = MaterialTheme.colorScheme.primary,
                                modifier = Modifier.clickable {
                                    try {
                                        val intent = Intent(Intent.ACTION_VIEW, developerVkUrl.toUri())
                                        context.startActivity(intent)
                                    } catch (e: Exception) {
                                        Timber.e(e, "Could not open VK profile")
                                    }
                                }
                            )
                        }
                        
                        Text(
                            text = "–í–µ—Ä—Å–∏—è: $appVersion",
                            style = MaterialTheme.typography.bodyMedium,
                            color = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                    }
                }
            
            Spacer(Modifier.height(16.dp))
                
                // –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    elevation = CardDefaults.cardElevation(defaultElevation = 1.dp)
                ) {
                    Column(
                        modifier = Modifier.padding(16.dp),
                        verticalArrangement = Arrangement.spacedBy(3.dp)
                    ) {
                        Text(
                            text = "–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è? –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏!",
                            style = MaterialTheme.typography.bodyMedium,
                            color = MaterialTheme.colorScheme.onSurfaceVariant
                        )

                        Spacer(Modifier.height(16.dp))

                        // –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
                        Button(
                            onClick = {
                                try {
                                    val intent = Intent(Intent.ACTION_VIEW, telegramUrl.toUri())
                                    context.startActivity(intent)
                                } catch (e: Exception) {
                                    Timber.e(e, "Could not open feedback form")
                                    android.widget.Toast.makeText(
                                        context,
                                        context.getString(R.string.error_open_feedback_form),
                                        android.widget.Toast.LENGTH_LONG
                                    ).show()
                                }
                            },
                            modifier = Modifier.fillMaxWidth()
                        ) {
                            Icon(
                                imageVector = Icons.Default.Feedback,
                                contentDescription = null,
                                modifier = Modifier.size(18.dp)
                            )
                            Spacer(Modifier.width(8.dp))
                            Text("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
                        }

                        Spacer(Modifier.height(8.dp))

                        Card(
                            modifier = Modifier.fillMaxWidth(),
                            colors = CardDefaults.cardColors(
                                containerColor = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f)
                            )
                        ) {
                            Column(
                                modifier = Modifier.padding(12.dp),
                                verticalArrangement = Arrangement.spacedBy(3.dp)
                            ) {
                                Text(
                                    text = "üí¨ –ß—Ç–æ –º–æ–∂–Ω–æ —Å–æ–æ–±—â–∏—Ç—å:",
                                    style = MaterialTheme.typography.bodyMedium.copy(fontWeight = FontWeight.Bold),
                                    color = MaterialTheme.colorScheme.onPrimaryContainer
                                )
                                Spacer(Modifier.height(4.dp))
                                Text(
                                    text = "‚Ä¢ –û—à–∏–±–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n" +
                                           "‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é\n" +
                                           "‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é",
                                    style = MaterialTheme.typography.bodySmall,
                                    color = MaterialTheme.colorScheme.onPrimaryContainer
                                )
                            }
                        }
                    }
                }
                
                Spacer(Modifier.height(16.dp))
                
                // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    elevation = CardDefaults.cardElevation(defaultElevation = 1.dp)
                ) {
                    Column(
                        modifier = Modifier.padding(16.dp),
                        verticalArrangement = Arrangement.spacedBy(3.dp)
                    ) {
                        Text(
                            text = "–ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –µ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É:",
                            style = MaterialTheme.typography.bodyMedium,
                            color = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                        
                        Spacer(Modifier.height(12.dp))
                        
                        // –ö–Ω–æ–ø–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            horizontalArrangement = Arrangement.spacedBy(6.dp)
                        ) {
                            // –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å"
                            OutlinedButton(
                                onClick = {
                                    val intent = Intent(Intent.ACTION_VIEW, "https://donatty.com/vv-olyushin".toUri())
                                    try {
                                        context.startActivity(intent)
                                    } catch (e: Exception) {
                                        Timber.e(e, "Could not open donation link")
                                    }
                                },
                                modifier = Modifier.weight(1f)
                            ) {
                                Icon(
                                    imageVector = Icons.Default.Favorite,
                                    contentDescription = null,
                                    modifier = Modifier.size(18.dp)
                                )
                                Spacer(Modifier.width(4.dp))
                                Text("–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å")
                            }
                            
                            // –ö–Ω–æ–ø–∫–∞ "–û—Ü–µ–Ω–∏—Ç—å"
                            OutlinedButton(
                                onClick = {
                                    val intent = Intent(Intent.ACTION_VIEW, "https://github.com/VseMirka200/lets_go_slavgorod".toUri())
                                    try {
                                        context.startActivity(intent)
                                    } catch (e: Exception) {
                                        Timber.e(e, "Could not open GitHub")
                                    }
                                },
                                modifier = Modifier.weight(1f)
                            ) {
                                Icon(
                                    imageVector = Icons.Default.Star,
                                    contentDescription = null,
                                    modifier = Modifier.size(18.dp)
                                )
                                Spacer(Modifier.width(4.dp))
                                Text("–û—Ü–µ–Ω–∏—Ç—å")
                            }
                        }
                        
                        Spacer(Modifier.height(8.dp))
                        
                        Card(
                            modifier = Modifier.fillMaxWidth(),
                            colors = CardDefaults.cardColors(
                                containerColor = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f)
                            )
                        ) {
                            Column(
                                modifier = Modifier.padding(12.dp),
                                verticalArrangement = Arrangement.spacedBy(3.dp)
                            ) {
                                Text(
                                    text = "üí° –°–ø–æ—Å–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:",
                                    style = MaterialTheme.typography.bodyMedium.copy(fontWeight = FontWeight.Bold),
                                    color = MaterialTheme.colorScheme.onPrimaryContainer
                                )
                                Spacer(Modifier.height(4.dp))
                                Text(
                                    text = "‚Ä¢ –ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–≤–µ–∑–¥—É –Ω–∞ GitHub\n" +
                                           "‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º —Å –¥—Ä—É–∑—å—è–º–∏\n" +
                                           "‚Ä¢ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
                                    style = MaterialTheme.typography.bodySmall,
                                    color = MaterialTheme.colorScheme.onPrimaryContainer
                                )
                            }
                        }
                    }
                }
            }
            
            Spacer(Modifier.height(16.dp))
        }
    }
    
    // –î–∏–∞–ª–æ–≥–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if (showResetSettingsDialog) {
        AlertDialog(
            onDismissRequest = { showResetSettingsDialog = false },
            title = { 
                Text(
                    text = stringResource(R.string.warning_title),
                    color = MaterialTheme.colorScheme.error,
                    style = MaterialTheme.typography.titleLarge.copy(fontWeight = FontWeight.Bold)
                ) 
            },
            text = { 
                Column(
                    verticalArrangement = Arrangement.spacedBy(12.dp)
                ) {
                    Text(
                        text = stringResource(R.string.settings_reset_warning),
                        style = MaterialTheme.typography.bodyLarge.copy(fontWeight = FontWeight.Bold),
                        color = MaterialTheme.colorScheme.error
                    )
                    
                    Text(
                        text = "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        style = MaterialTheme.typography.bodyMedium.copy(fontWeight = FontWeight.Bold)
                    )
                    
                    Column(
                        modifier = Modifier.padding(start = 8.dp),
                        verticalArrangement = Arrangement.spacedBy(4.dp)
                    ) {
                        Text(
                            text = "‚Ä¢ –£–¥–∞–ª–∏—Ç –≤—Å–µ –≤–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                            style = MaterialTheme.typography.bodyMedium
                        )
                        Text(
                            text = "‚Ä¢ –°–±—Ä–æ—Å–∏—Ç —Ç–µ–º—É –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—É—é",
                            style = MaterialTheme.typography.bodyMedium
                        )
                        Text(
                            text = "‚Ä¢ –í–µ—Ä–Ω—ë—Ç —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                            style = MaterialTheme.typography.bodyMedium
                        )
                        Text(
                            text = "‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                            style = MaterialTheme.typography.bodyMedium
                        )
                    }
                    
                    Spacer(Modifier.height(8.dp))
                    
                    Text(
                        text = "–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –ù–ï –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.",
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurfaceVariant,
                        fontStyle = androidx.compose.ui.text.font.FontStyle.Italic
                    )
                    
                    Spacer(Modifier.height(4.dp))
                    
                    Text(
                        text = "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
                        style = MaterialTheme.typography.bodyLarge.copy(fontWeight = FontWeight.Bold)
                    )
                }
            },
            dismissButton = {
                TextButton(onClick = { showResetSettingsDialog = false }) {
                    Text("–û—Ç–º–µ–Ω–∞")
                }
            },
            confirmButton = {
                TextButton(
                    onClick = {
                        showResetSettingsDialog = false
                        dataManagementViewModel.resetAllSettings()
                    }
                ) {
                    Text("–î–∞, —Å–±—Ä–æ—Å–∏—Ç—å")
                }
            }
        )
    }
    
    // –î–∏–∞–ª–æ–≥ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
    if (showClearCacheDialog) {
        AlertDialog(
            onDismissRequest = { showClearCacheDialog = false },
            title = { 
                Text(
                    text = "–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞",
                    style = MaterialTheme.typography.titleLarge.copy(fontWeight = FontWeight.Bold)
                ) 
            },
            text = { 
                Column(
                    verticalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    Text(
                        text = "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –æ—á–∏—Å—Ç–∏—Ç –≤–µ—Å—å –∫—ç—à –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:",
                        style = MaterialTheme.typography.bodyMedium
                    )
                    
                    Column(
                        modifier = Modifier.padding(start = 8.dp),
                        verticalArrangement = Arrangement.spacedBy(4.dp)
                    ) {
                        Text(
                            text = "‚Ä¢ –ö—ç—à –º–∞—Ä—à—Ä—É—Ç–æ–≤",
                            style = MaterialTheme.typography.bodyMedium
                        )
                        Text(
                            text = "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                            style = MaterialTheme.typography.bodyMedium
                        )
                    }
                    
                    Spacer(Modifier.height(4.dp))
                    
                    Text(
                        text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ù–ï –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.",
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurfaceVariant,
                        fontStyle = androidx.compose.ui.text.font.FontStyle.Italic
                    )
                }
            },
            dismissButton = {
                TextButton(onClick = { showClearCacheDialog = false }) {
                    Text("–û—Ç–º–µ–Ω–∞")
                }
            },
            confirmButton = {
                TextButton(
                    onClick = {
                        Timber.d("Cache clearing is no longer needed (managed automatically by JsonDataSource)")
                        cacheCleared = true
                        showClearCacheDialog = false
                    }
                ) {
                    Text("–û—á–∏—Å—Ç–∏—Ç—å")
                }
            }
        )
    }
}

/**
 * –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
 * 
 * –°–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
 * 1. –†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫–ª–µ—Ç–∫–∞/—Å–ø–∏—Å–æ–∫)
 * 2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ (1-4, —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ "–∫–ª–µ—Ç–∫–∞")
 * 
 * –ü—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –º–æ–¥–∞–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞.
 * 
 * @param currentDisplayMode —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param currentGridColumns —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫
 * @param showDisplayModeDropdown —Ñ–ª–∞–≥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–∂–∏–º–∞
 * @param onShowDisplayModeDropdownChange callback –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–ª–∞–≥–∞ –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–∂–∏–º–∞
 * @param displayModeOptions –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param onDisplayModeSelected callback –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param onColumnsSelected callback –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ª–æ–Ω–æ–∫
 * @param showColumnsDropdown —Ñ–ª–∞–≥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∫–æ–ª–æ–Ω–æ–∫
 * @param onShowColumnsDropdownChange callback –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–ª–∞–≥–∞ –¥–∏–∞–ª–æ–≥–∞ –∫–æ–ª–æ–Ω–æ–∫
 * @param columnsOptions –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ª–æ–Ω–æ–∫
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
private fun DisplaySettingsCard(
    currentDisplayMode: RouteDisplayMode,
    currentGridColumns: Int,
    showDisplayModeDropdown: Boolean,
    onShowDisplayModeDropdownChange: (Boolean) -> Unit,
    displayModeOptions: List<Pair<RouteDisplayMode, String>>,
    onDisplayModeSelected: (RouteDisplayMode) -> Unit,
    onColumnsSelected: (Int) -> Unit,
    showColumnsDropdown: Boolean,
    onShowColumnsDropdownChange: (Boolean) -> Unit,
    columnsOptions: List<Pair<Int, String>>
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = CardDefaults.cardElevation(defaultElevation = 1.dp)
    ) {
        Column(
            modifier = Modifier.fillMaxWidth()
        ) {
            // –†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(start = 16.dp, end = 16.dp, top = 12.dp, bottom = 12.dp),
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    modifier = Modifier.weight(1f)
                ) {
                    Icon(
                        imageVector = Icons.Filled.Palette,
                        contentDescription = "–ò–∫–æ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                        tint = MaterialTheme.colorScheme.primary,
                        modifier = Modifier.size(24.dp)
                    )
                    
                    Spacer(Modifier.width(16.dp))
                    
                    Text(
                        text = "–†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                        style = MaterialTheme.typography.bodyLarge
                    )
                }

                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.spacedBy(4.dp),
                        modifier = Modifier
                            .padding(start = 8.dp)
                            .clickable { onShowDisplayModeDropdownChange(true) }
                    ) {
                        Text(
                            text = displayModeOptions.find { it.first == currentDisplayMode }?.second ?: "–ö–ª–µ—Ç–∫–∞",
                            style = MaterialTheme.typography.bodyMedium,
                            color = MaterialTheme.colorScheme.primary
                        )
                }
            }
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ –∫–ª–µ—Ç–∫–∞)
            if (currentDisplayMode == RouteDisplayMode.GRID) {
                // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                HorizontalDivider(
                    color = MaterialTheme.colorScheme.outline.copy(alpha = 0.3f)
                )
                
                // –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ª–æ–Ω–æ–∫
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(start = 16.dp, end = 16.dp, top = 12.dp, bottom = 12.dp),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = "–ö–æ–ª–æ–Ω–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ",
                        style = MaterialTheme.typography.bodyLarge
                    )
                    
                        Row(
                            verticalAlignment = Alignment.CenterVertically,
                            horizontalArrangement = Arrangement.spacedBy(4.dp),
                            modifier = Modifier
                                .padding(start = 8.dp)
                                .clickable { onShowColumnsDropdownChange(true) }
                        ) {
                            Text(
                                text = columnsOptions.find { it.first == currentGridColumns }?.second ?: "2 –∫–æ–ª–æ–Ω–∫–∏",
                                style = MaterialTheme.typography.bodyMedium,
                                color = MaterialTheme.colorScheme.primary
                            )
                    }
                }
            }
        }
    }
    
    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
    if (showDisplayModeDropdown) {
        ModalSelectionDialog(
            title = "–†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            options = displayModeOptions.map { it.second },
            selectedIndex = displayModeOptions.indexOfFirst { it.first == currentDisplayMode },
            onOptionSelected = { index ->
                onDisplayModeSelected(displayModeOptions[index].first)
                onShowDisplayModeDropdownChange(false)
            },
            onDismiss = { onShowDisplayModeDropdownChange(false) }
        )
    }
    
    if (showColumnsDropdown && currentDisplayMode == RouteDisplayMode.GRID) {
        ModalSelectionDialog(
            title = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫",
            options = columnsOptions.map { it.second },
            selectedIndex = columnsOptions.indexOfFirst { it.first == currentGridColumns },
            onOptionSelected = { index ->
                onColumnsSelected(columnsOptions[index].first)
                onShowColumnsDropdownChange(false)
            },
            onDismiss = { onShowColumnsDropdownChange(false) }
        )
    }
}

/**
 * –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–º—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * 
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 * –ü—Ä–∏ –∫–ª–∏–∫–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –º–æ–¥–∞–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏.
 * 
 * –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã:
 * - –ö–∞–∫ –≤ —Å–∏—Å—Ç–µ–º–µ (—Å–ª–µ–¥—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–µ–º–µ Android)
 * - –°–≤–µ—Ç–ª–∞—è
 * - –¢–µ–º–Ω–∞—è
 * 
 * @param currentAppTheme —Ç–µ–∫—É—â–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞
 * @param showThemeDropdown —Ñ–ª–∞–≥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
 * @param onShowThemeDropdownChange callback –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–ª–∞–≥–∞ –¥–∏–∞–ª–æ–≥–∞
 * @param themeOptions —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º
 * @param onThemeSelected callback –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
 */
@Composable
fun ThemeSettingsCard(
    currentAppTheme: AppTheme,
    showThemeDropdown: Boolean,
    onShowThemeDropdownChange: (Boolean) -> Unit,
    themeOptions: List<Pair<AppTheme, String>>,
    onThemeSelected: (AppTheme) -> Unit,
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = CardDefaults.cardElevation(defaultElevation = 1.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .clickable { onShowThemeDropdownChange(true) }
                .padding(start = 16.dp, end = 16.dp, top = 12.dp, bottom = 12.dp),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier.weight(1f)
            ) {
                    Icon(
                        imageVector = Icons.Filled.Palette,
                        contentDescription = stringResource(R.string.settings_appearance_icon_desc),
                        tint = MaterialTheme.colorScheme.primary,
                        modifier = Modifier.size(24.dp)
                    )
                    Spacer(Modifier.width(16.dp))
                    Text(
                    text = "–¢–µ–º—ã",
                        style = MaterialTheme.typography.bodyLarge
                    )
                }
            
                    Text(
                        text = themeOptions.find { it.first == currentAppTheme }?.second ?: "–ö–∞–∫ –≤ —Å–∏—Å—Ç–µ–º–µ",
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.primary
                    )
        }
    }
    
    // –ú–æ–¥–∞–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
    if (showThemeDropdown) {
        ModalSelectionDialog(
            title = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É",
            options = themeOptions.map { it.second },
            selectedIndex = themeOptions.indexOfFirst { it.first == currentAppTheme },
            onOptionSelected = { index ->
                onThemeSelected(themeOptions[index].first)
                            onShowThemeDropdownChange(false)
            },
            onDismiss = { onShowThemeDropdownChange(false) }
                    )
    }
}

/**
 * –ï–¥–∏–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 * 
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ:
 * - –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 * - –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 * - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
 * 
 * @param currentUpdateMode —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 * @param showUpdateModeDropdown —Ñ–ª–∞–≥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é
 * @param onShowUpdateModeDropdownChange callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–Ω—é
 * @param updateModeOptions –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 * @param onUpdateModeSelected callback –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
 * @param isCheckingUpdates —Ñ–ª–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 * @param updateCheckError –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 * @param updateCheckStatus —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 * @param lastUpdateCheckTime –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param availableUpdateVersion –≤–µ—Ä—Å–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @param availableUpdateUrl —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @param availableUpdateNotes –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
 * @param onCheckForUpdates callback –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 * @param onClearAvailableUpdate callback –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
 * @param onClearUpdateStatus callback –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
 * @param onDownloadUpdate callback –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */
@Composable
fun UpdateSettingsCard(
    currentUpdateMode: UpdateMode,
    showUpdateModeDropdown: Boolean,
    onShowUpdateModeDropdownChange: (Boolean) -> Unit,
    updateModeOptions: Array<UpdateMode>,
    onUpdateModeSelected: (UpdateMode) -> Unit,
    isCheckingUpdates: Boolean,
    updateCheckError: String?,
    updateCheckStatus: String?,
    lastUpdateCheckTime: Long,
    availableUpdateVersion: String?,
    availableUpdateUrl: String?,
    availableUpdateNotes: String?,
    onCheckForUpdates: () -> Unit,
    onClearAvailableUpdate: () -> Unit,
    onClearUpdateStatus: () -> Unit,
    onDownloadUpdate: (String) -> Unit,
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = CardDefaults.cardElevation(defaultElevation = 1.dp)
    ) {
        Column(
            modifier = Modifier.padding(0.dp)
        ) {
            // –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ –≤–∏–¥–µ –µ–¥–∏–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –∫–∞–∫ –≤ –¥—Ä—É–≥–∏—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(start = 16.dp, end = 16.dp, top = 12.dp, bottom = 12.dp),
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        modifier = Modifier.weight(1f)
                    ) {
                        Icon(
                            imageVector = Icons.Filled.Update,
                            contentDescription = "–†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                            tint = MaterialTheme.colorScheme.primary,
                            modifier = Modifier.size(24.dp)
                        )
                        Spacer(Modifier.width(16.dp))
                        Text(
                            text = "–†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                            style = MaterialTheme.typography.bodyLarge
                        )
                    }
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.spacedBy(4.dp),
                            modifier = Modifier
                                .padding(start = 8.dp)
                                .clickable { onShowUpdateModeDropdownChange(true) }
                    ) {
                        Text(
                            text = when (currentUpdateMode) {
                                UpdateMode.AUTOMATIC -> "–ê–≤—Ç–æ"
                                UpdateMode.MANUAL -> "–†—É—á–Ω–æ–π"
                                UpdateMode.DISABLED -> "–í—ã–∫–ª"
                            },
                            style = MaterialTheme.typography.bodyMedium,
                            color = MaterialTheme.colorScheme.primary
                        )
                }
            }
            
            // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            if (currentUpdateMode != UpdateMode.DISABLED) {
                HorizontalDivider(
                    color = MaterialTheme.colorScheme.outline.copy(alpha = 0.3f)
                )
                
                // –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(start = 16.dp, end = 16.dp, top = 12.dp, bottom = 12.dp),
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    Column(
                        modifier = Modifier.weight(1f)
                    ) {
                        Text(
                            text = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π",
                            style = MaterialTheme.typography.bodyLarge
                        )
                        if (lastUpdateCheckTime > 0L) {
                            Spacer(Modifier.height(6.dp))
                            Text(
                                text = "–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${formatLastCheckTime(lastUpdateCheckTime)}",
                                style = MaterialTheme.typography.bodySmall,
                                color = MaterialTheme.colorScheme.onSurfaceVariant
                            )
                        }
                    }
                    Spacer(Modifier.width(8.dp))
                    Button(
                        onClick = onCheckForUpdates,
                        enabled = !isCheckingUpdates,
                        modifier = Modifier.height(36.dp)
                    ) {
                        if (isCheckingUpdates) {
                            CircularProgressIndicator(
                                modifier = Modifier.size(16.dp),
                                strokeWidth = 2.dp
                            )
                            Spacer(Modifier.width(8.dp))
                            Text("–ü—Ä–æ–≤–µ—Ä—è–µ–º...")
                        } else {
                            Text("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å")
                        }
                    }
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                updateCheckStatus?.let { status ->
                    Spacer(Modifier.height(6.dp))
                    Card(
                        modifier = Modifier.fillMaxWidth(),
                        colors = CardDefaults.cardColors(
                            containerColor = if (status.contains("–ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è")) {
                                MaterialTheme.colorScheme.primaryContainer
                            } else {
                                MaterialTheme.colorScheme.secondaryContainer
                            }
                        )
                    ) {
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(12.dp),
                            verticalAlignment = Alignment.CenterVertically,
                            horizontalArrangement = Arrangement.SpaceBetween
                        ) {
                            Row(
                                verticalAlignment = Alignment.CenterVertically,
                                modifier = Modifier.weight(1f)
                            ) {
                                Icon(
                                    imageVector = if (status.contains("–ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è")) {
                                        Icons.Filled.CheckCircle
                                    } else {
                                        Icons.Filled.Update
                                    },
                                    contentDescription = "–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                                    tint = if (status.contains("–ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è")) {
                                        MaterialTheme.colorScheme.primary
                                    } else {
                                        MaterialTheme.colorScheme.secondary
                                    },
                                    modifier = Modifier.size(20.dp)
                                )
                                Spacer(Modifier.width(8.dp))
                                Text(
                                    text = status,
                                    style = MaterialTheme.typography.bodyMedium,
                                    color = if (status.contains("–ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è")) {
                                        MaterialTheme.colorScheme.onPrimaryContainer
                                    } else {
                                        MaterialTheme.colorScheme.onSecondaryContainer
                                    }
                                )
                            }
                            IconButton(
                                onClick = onClearUpdateStatus,
                                modifier = Modifier.size(24.dp)
                            ) {
                                Icon(
                                    imageVector = Icons.Filled.Close,
                                    contentDescription = "–ó–∞–∫—Ä—ã—Ç—å",
                                    tint = if (status.contains("–ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è")) {
                                        MaterialTheme.colorScheme.onPrimaryContainer
                                    } else {
                                        MaterialTheme.colorScheme.onSecondaryContainer
                                    },
                                    modifier = Modifier.size(16.dp)
                                )
                            }
                        }
                    }
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
                updateCheckError?.let { error ->
                    Spacer(Modifier.height(12.dp))
                    Card(
                        modifier = Modifier.fillMaxWidth(),
                        colors = CardDefaults.cardColors(
                            containerColor = MaterialTheme.colorScheme.errorContainer
                        )
                    ) {
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(12.dp),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Icon(
                                imageVector = Icons.Filled.Error,
                                contentDescription = "–û—à–∏–±–∫–∞",
                                tint = MaterialTheme.colorScheme.error,
                                modifier = Modifier.size(20.dp)
                            )
                            Spacer(Modifier.width(8.dp))
                            Text(
                                text = error,
                                style = MaterialTheme.typography.bodyMedium,
                                color = MaterialTheme.colorScheme.onErrorContainer
                            )
                        }
                    }
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
                availableUpdateVersion?.let { version ->
                    Spacer(Modifier.height(12.dp))
                    Card(
                        modifier = Modifier.fillMaxWidth(),
                        colors = CardDefaults.cardColors(
                            containerColor = MaterialTheme.colorScheme.primaryContainer
                        )
                    ) {
                        Column(
                            modifier = Modifier.padding(12.dp)
                        ) {
                            Row(
                                verticalAlignment = Alignment.CenterVertically,
                                horizontalArrangement = Arrangement.spacedBy(8.dp)
                            ) {
                                Icon(
                                    imageVector = Icons.Filled.Download,
                                    contentDescription = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
                                    tint = MaterialTheme.colorScheme.primary,
                                    modifier = Modifier.size(20.dp)
                                )
                                Text(
                                    text = "–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ $version",
                                    style = MaterialTheme.typography.bodyMedium.copy(
                                        fontWeight = FontWeight.Bold
                                    ),
                                    color = MaterialTheme.colorScheme.onPrimaryContainer
                                )
                            }
                            
                            availableUpdateNotes?.let { notes ->
                                Spacer(Modifier.height(8.dp))
                                Text(
                                    text = notes,
                                    style = MaterialTheme.typography.bodySmall,
                                    color = MaterialTheme.colorScheme.onPrimaryContainer
                                )
                            }
                            
                            Spacer(Modifier.height(12.dp))
                            
                            Row(
                                horizontalArrangement = Arrangement.spacedBy(8.dp)
                            ) {
                                Button(
                                    onClick = {
                                        availableUpdateUrl?.let { url ->
                                            onDownloadUpdate(url)
                                        }
                                    },
                                    modifier = Modifier.weight(1f)
                                ) {
                                    Icon(
                                        imageVector = Icons.Filled.Download,
                                        contentDescription = "–°–∫–∞—á–∞—Ç—å",
                                        modifier = Modifier.size(16.dp)
                                    )
                                    Spacer(Modifier.width(4.dp))
                                    Text("–°–∫–∞—á–∞—Ç—å")
                                }
                                
                                OutlinedButton(
                                    onClick = onClearAvailableUpdate,
                                    modifier = Modifier.weight(1f)
                                ) {
                                    Text("–ü–æ–∑–∂–µ")
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    // –ú–æ–¥–∞–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    if (showUpdateModeDropdown) {
        ModalSelectionDialog(
            title = "–†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
            options = updateModeOptions.map { mode ->
                when (mode) {
                    UpdateMode.AUTOMATIC -> "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
                    UpdateMode.MANUAL -> "–¢–æ–ª—å–∫–æ —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
                    UpdateMode.DISABLED -> "–û—Ç–∫–ª—é—á–µ–Ω–æ"
                }
            },
            selectedIndex = updateModeOptions.indexOf(currentUpdateMode),
            onOptionSelected = { index ->
                onUpdateModeSelected(updateModeOptions[index])
                onShowUpdateModeDropdownChange(false)
            },
            onDismiss = { onShowUpdateModeDropdownChange(false) }
        )
    }
}


/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
 */
private fun formatLastCheckTime(timestamp: Long): String {
    val now = System.currentTimeMillis()
    val diff = now - timestamp
    
    return when {
        diff < 60_000 -> "—Ç–æ–ª—å–∫–æ —á—Ç–æ" // –º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã
        diff < 3600_000 -> "${diff / 60_000} –º–∏–Ω. –Ω–∞–∑–∞–¥" // –º–µ–Ω–µ–µ —á–∞—Å–∞
        diff < 86400_000 -> "${diff / 3600_000} —á. –Ω–∞–∑–∞–¥" // –º–µ–Ω–µ–µ —Å—É—Ç–æ–∫
        else -> {
            val dateFormat = java.text.SimpleDateFormat("dd.MM.yyyy HH:mm", java.util.Locale.getDefault())
            dateFormat.format(java.util.Date(timestamp))
        }
    }
}

/**
 * –ö–∞—Ä—Ç–æ—á–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * 
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–º —Ä–µ–∂–∏–º–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤.
 * –†–µ–∂–∏–º –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ.
 * 
 * –†–µ–∂–∏–º—ã:
 * - –í–∫–ª—é—á–µ–Ω—ã: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
 * - –û—Ç–∫–ª—é—á–µ–Ω—ã: –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã
 * - –í—Ä–µ–º–µ–Ω–Ω–æ: –æ—Ç–∫–ª—é—á–µ–Ω—ã –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
 * 
 * –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è
 * —á–µ—Ä–µ–∑ —ç–∫—Ä–∞–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–∫–Ω–æ–ø–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —à–∞–ø–∫–µ).
 * 
 * @param currentQuietMode —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ç–∏—Ö–æ–≥–æ —Ä–µ–∂–∏–º–∞
 * @param showQuietModeDropdown —Ñ–ª–∞–≥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
 * @param onShowQuietModeDropdownChange callback –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–ª–∞–≥–∞ –¥–∏–∞–ª–æ–≥–∞
 * @param quietModeOptions –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Ç–∏—Ö–æ–≥–æ —Ä–µ–∂–∏–º–∞
 * @param customDays –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
 * @param onQuietModeSelected callback –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ (—Ä–µ–∂–∏–º, –¥–Ω–∏)
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
private fun QuietModeSettingsCard(
    currentQuietMode: QuietMode,
    showQuietModeDropdown: Boolean,
    onShowQuietModeDropdownChange: (Boolean) -> Unit,
    quietModeOptions: Array<QuietMode>,
    customDays: Int,
    onQuietModeSelected: (QuietMode, Int) -> Unit
) {
    var showDaysDialog by remember { mutableStateOf(false) }
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = CardDefaults.cardElevation(defaultElevation = 1.dp)
    ) {
        Column(
            modifier = Modifier.fillMaxWidth()
        ) {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(start = 16.dp, end = 16.dp, top = 12.dp, bottom = 12.dp),
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Row(verticalAlignment = Alignment.CenterVertically) {
                    Icon(
                        imageVector = Icons.Default.NotificationsOff,
                        contentDescription = stringResource(R.string.settings_quiet_mode_icon_desc),
                        tint = MaterialTheme.colorScheme.primary,
                        modifier = Modifier.size(24.dp)
                    )
                    Spacer(Modifier.width(16.dp))
                    Text(
                        text = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                        style = MaterialTheme.typography.bodyLarge
                    )
                }
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.spacedBy(4.dp),
                        modifier = Modifier.clickable { onShowQuietModeDropdownChange(true) }
                    ) {
                        Text(
                            text = when (currentQuietMode) {
                                QuietMode.DISABLED -> "–û—Ç–∫–ª—é—á–µ–Ω—ã"
                                QuietMode.ENABLED -> "–í–∫–ª—é—á–µ–Ω—ã"
                                QuietMode.CUSTOM_DAYS -> "–í—Ä–µ–º–µ–Ω–Ω–æ: $customDays ${getDaysWord(customDays)}"
                            },
                            style = MaterialTheme.typography.bodyMedium,
                            color = MaterialTheme.colorScheme.primary
                        )
                }
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º CUSTOM_DAYS
            if (currentQuietMode == QuietMode.CUSTOM_DAYS && customDays > 0) {
                HorizontalDivider(color = MaterialTheme.colorScheme.outline.copy(alpha = 0.3f))
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(horizontal = 16.dp, vertical = 12.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Icon(
                        imageVector = Icons.Default.Info,
                        contentDescription = null,
                        tint = MaterialTheme.colorScheme.onSurfaceVariant,
                        modifier = Modifier.size(20.dp)
                    )
                    Spacer(Modifier.width(8.dp))
                    Text(
                        text = stringResource(R.string.quiet_mode_info, customDays, getDaysWord(customDays)),
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
            }
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ
            if (currentQuietMode != QuietMode.ENABLED && currentQuietMode != QuietMode.CUSTOM_DAYS) {
                HorizontalDivider(color = MaterialTheme.colorScheme.outline.copy(alpha = 0.3f))
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(horizontal = 16.dp, vertical = 12.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Icon(
                        imageVector = Icons.Default.Info,
                        contentDescription = null,
                        tint = MaterialTheme.colorScheme.onSurfaceVariant,
                        modifier = Modifier.size(20.dp)
                    )
                    Spacer(Modifier.width(8.dp))
                    Text(
                        text = stringResource(R.string.quiet_mode_all_disabled),
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
            }
        }
    }
    
    // –ú–æ–¥–∞–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (showQuietModeDropdown) {
        ModalSelectionDialog(
            title = "–†–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
            options = quietModeOptions.map { it.displayName },
            selectedIndex = quietModeOptions.indexOf(currentQuietMode),
            onOptionSelected = { index ->
                val mode = quietModeOptions[index]
                if (mode == QuietMode.CUSTOM_DAYS) {
                    showDaysDialog = true
                    onShowQuietModeDropdownChange(false)
                } else {
                    onQuietModeSelected(mode, 0)
                    onShowQuietModeDropdownChange(false)
                }
            },
            onDismiss = { onShowQuietModeDropdownChange(false) }
        )
    }
    
    // –î–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
    if (showDaysDialog) {
        CustomDaysDialog(
            onDismiss = { showDaysDialog = false },
            onConfirm = { days ->
                onQuietModeSelected(QuietMode.CUSTOM_DAYS, days)
                showDaysDialog = false
            }
        )
    }
}

// –°–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "–¥–µ–Ω—å"
private fun getDaysWord(count: Int): String {
    return when {
        count % 10 == 1 && count % 100 != 11 -> "–¥–µ–Ω—å"
        count % 10 in 2..4 && (count % 100 < 10 || count % 100 >= 20) -> "–¥–Ω—è"
        else -> "–¥–Ω–µ–π"
    }
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ–¥–∞–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–π
 * 
 * –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã–±–æ—Ä–∞.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –≤—ã–±–æ—Ä–æ–º –∏–∑ —Å–ø–∏—Å–∫–∞.
 * 
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
 * - –†–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
 * - –ö–ª–∏–∫ –Ω–∞ –≤—Å—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ (—É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∏–∑–≤–Ω–µ)
 * - –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫—Ä—ã—Ç—å" –¥–ª—è –æ—Ç–º–µ–Ω—ã
 * 
 * @param title –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏–∞–ª–æ–≥–∞
 * @param options —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
 * @param selectedIndex –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
 * @param onOptionSelected callback –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —ç–ª–µ–º–µ–Ω—Ç–∞ (–ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∏–Ω–¥–µ–∫—Å)
 * @param onDismiss callback –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥–∏–∞–ª–æ–≥–∞
 */
@Composable
private fun ModalSelectionDialog(
    title: String,
    options: List<String>,
    selectedIndex: Int,
    onOptionSelected: (Int) -> Unit,
    onDismiss: () -> Unit
) {
    AlertDialog(
        onDismissRequest = onDismiss,
        title = {
            Text(
                text = title,
                style = MaterialTheme.typography.titleLarge.copy(fontWeight = FontWeight.Bold)
            )
        },
        text = {
            Column(
                modifier = Modifier.fillMaxWidth(),
                verticalArrangement = Arrangement.spacedBy(0.dp)
            ) {
                options.forEachIndexed { index, option ->
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .clickable { onOptionSelected(index) }
                            .padding(vertical = 12.dp),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        RadioButton(
                            selected = index == selectedIndex,
                            onClick = { onOptionSelected(index) }
                        )
                        Spacer(Modifier.width(16.dp))
                        Text(
                            text = option,
                            style = MaterialTheme.typography.bodyLarge
                        )
                    }
                }
            }
        },
        confirmButton = {
            TextButton(onClick = onDismiss) {
                Text("–ó–∞–∫—Ä—ã—Ç—å")
            }
        }
    )
}

/**
 * –î–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * 
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–∫–∞–∑–∞—Ç—å –Ω–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ–∂–∏–º–∞ "–í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å".
 * 
 * –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
 * - –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
 * - –ú–∞–∫—Å–∏–º—É–º 3 —Ü–∏—Ñ—Ä—ã (–¥–æ 999 –¥–Ω–µ–π)
 * - –ú–∏–Ω–∏–º—É–º 1 –¥–µ–Ω—å
 * 
 * @param onDismiss callback –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
 * @param onConfirm callback –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ (–ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π)
 */
@Composable
private fun CustomDaysDialog(
    onDismiss: () -> Unit,
    onConfirm: (Int) -> Unit
) {
    var daysInput by remember { mutableStateOf("1") }
    
    AlertDialog(
        onDismissRequest = onDismiss,
        title = { Text("–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è") },
        text = {
            Column {
                Text(
                    text = "–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?",
                    style = MaterialTheme.typography.bodyMedium
                )
                Spacer(Modifier.height(16.dp))
                OutlinedTextField(
                    value = daysInput,
                    onValueChange = { newValue ->
                        if (newValue.all { it.isDigit() } && newValue.length <= 3) {
                            daysInput = newValue
                        }
                    },
                    label = { Text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π") },
                    singleLine = true,
                    modifier = Modifier.fillMaxWidth()
                )
            }
        },
        confirmButton = {
            Button(
                onClick = {
                    val days = daysInput.toIntOrNull() ?: 1
                    if (days > 0) {
                        onConfirm(days)
                    }
                }
            ) {
                Text("–û–ö")
            }
        },
        dismissButton = {
            TextButton(onClick = onDismiss) {
                Text("–û—Ç–º–µ–Ω–∞")
            }
        }
    )
}

/**
 * –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 * 
 * –û–ø–∞—Å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è - —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
 * –ü—Ä–∏ –∫–ª–∏–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º.
 * 
 * –ß—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è:
 * - –¢–µ–º–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * - –†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 * - –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * 
 * –ß—Ç–æ –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è:
 * - –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 * - –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç–æ–≤
 * 
 * @param onResetSettings callback –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
@Composable
private fun ResetSettingsCard(
    onResetSettings: () -> Unit
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = CardDefaults.cardElevation(defaultElevation = 1.dp),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.errorContainer.copy(alpha = 0.3f)
        )
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .clickable { onResetSettings() }
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier.weight(1f)
            ) {
                Icon(
                    imageVector = Icons.Default.Error,
                    contentDescription = "–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                    tint = MaterialTheme.colorScheme.error,
                    modifier = Modifier.size(24.dp)
                )
                Spacer(Modifier.width(16.dp))
                Column {
                    Text(
                        text = "–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                        style = MaterialTheme.typography.bodyLarge,
                        color = MaterialTheme.colorScheme.error
                    )
                    Spacer(Modifier.height(6.dp))
                    Text(
                        text = "–í–µ—Ä–Ω—É—Ç—å –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
            }
            Icon(
                imageVector = Icons.AutoMirrored.Filled.ArrowForward,
                contentDescription = "–°–±—Ä–æ—Å–∏—Ç—å",
                tint = MaterialTheme.colorScheme.error
            )
        }
    }
}


/**
 * –ö–∞—Ä—Ç–æ—á–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * 
 * –£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∫—ç—à –º–∞—Ä—à—Ä—É—Ç–æ–≤.
 * –¢—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.
 * 
 * –ß—Ç–æ –æ—á–∏—â–∞–µ—Ç—Å—è:
 * - –ö—ç—à –º–∞—Ä—à—Ä—É—Ç–æ–≤
 * - –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
 * 
 * –ß—Ç–æ –ù–ï –æ—á–∏—â–∞–µ—Ç—Å—è:
 * - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * - –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞
 * 
 * @param onClearCache callback –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
 * @param cacheCleared —Ñ–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
 */
@Composable
private fun ClearCacheCard(
    onClearCache: () -> Unit,
    cacheCleared: Boolean
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = CardDefaults.cardElevation(defaultElevation = 1.dp),
        colors = CardDefaults.cardColors(
            containerColor = if (cacheCleared) {
                MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f)
            } else {
                MaterialTheme.colorScheme.errorContainer.copy(alpha = 0.3f)
            }
        )
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .clickable(enabled = !cacheCleared) { onClearCache() }
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier.weight(1f)
            ) {
                Icon(
                    imageVector = if (cacheCleared) Icons.Filled.CheckCircle else Icons.Default.Delete,
                    contentDescription = "–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞",
                    tint = if (cacheCleared) {
                        MaterialTheme.colorScheme.primary
                    } else {
                        MaterialTheme.colorScheme.error
                    },
                    modifier = Modifier.size(24.dp)
                )
                Spacer(Modifier.width(16.dp))
                Column {
                    Text(
                        text = if (cacheCleared) "–ö—ç—à –æ—á–∏—â–µ–Ω" else "–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞",
                        style = MaterialTheme.typography.bodyLarge,
                        color = if (cacheCleared) {
                            MaterialTheme.colorScheme.primary
                        } else {
                            MaterialTheme.colorScheme.error
                        }
                    )
                    Spacer(Modifier.height(6.dp))
                    Text(
                        text = if (cacheCleared) {
                            "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è"
                        } else {
                            "–£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∫—ç—à –º–∞—Ä—à—Ä—É—Ç–æ–≤"
                        },
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
            }
            if (!cacheCleared) {
                Icon(
                    imageVector = Icons.AutoMirrored.Filled.ArrowForward,
                    contentDescription = "–û—á–∏—Å—Ç–∏—Ç—å",
                    tint = MaterialTheme.colorScheme.error
                )
            } else {
                Icon(
                    imageVector = Icons.Filled.CheckCircle,
                    contentDescription = "–û—á–∏—â–µ–Ω–æ",
                    tint = MaterialTheme.colorScheme.primary
                )
            }
        }
    }
}

/**
 * –ö–∞—Ä—Ç–æ—á–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ GitHub
 * 
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Ä—É—á–Ω—É—é –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–æ–≤
 * –∏–∑ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ JSON —Ñ–∞–π–ª–∞ –Ω–∞ GitHub.
 * 
 * @param isRefreshing —Ñ–ª–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @param refreshError —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @param refreshSuccess —Ñ–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @param dataVersion —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –¥–∞–Ω–Ω—ã—Ö
 * @param dataLastUpdated –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @param onRefresh callback –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @param onClearStatus callback –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
 */
@Composable
private fun ScheduleUpdateCard(
    isRefreshing: Boolean,
    refreshError: String?,
    refreshSuccess: Boolean,
    dataVersion: String?,
    dataLastUpdated: String?,
    onRefresh: () -> Unit,
    onClearStatus: () -> Unit
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = CardDefaults.cardElevation(defaultElevation = 1.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
            Text(
                text = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
                style = MaterialTheme.typography.bodyLarge.copy(fontWeight = FontWeight.Bold),
                color = MaterialTheme.colorScheme.onSurface
            )
            
            Text(
                text = "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ GitHub",
                style = MaterialTheme.typography.bodySmall,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏
            if (dataVersion != null || dataLastUpdated != null) {
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    colors = CardDefaults.cardColors(
                        containerColor = MaterialTheme.colorScheme.surfaceVariant
                    )
                ) {
                    Column(
                        modifier = Modifier.padding(12.dp),
                        verticalArrangement = Arrangement.spacedBy(4.dp)
                    ) {
                        if (dataVersion != null) {
                            Text(
                                text = "–í–µ—Ä—Å–∏—è –¥–∞–Ω–Ω—ã—Ö: $dataVersion",
                                style = MaterialTheme.typography.bodySmall,
                                color = MaterialTheme.colorScheme.onSurfaceVariant
                            )
                        }
                        if (dataLastUpdated != null) {
                            Text(
                                text = "–û–±–Ω–æ–≤–ª–µ–Ω–æ: $dataLastUpdated",
                                style = MaterialTheme.typography.bodySmall,
                                color = MaterialTheme.colorScheme.onSurfaceVariant
                            )
                        }
                    }
                }
            }
            
            // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            Button(
                onClick = onRefresh,
                enabled = !isRefreshing,
                modifier = Modifier.fillMaxWidth()
            ) {
                if (isRefreshing) {
                    CircularProgressIndicator(
                        modifier = Modifier.size(18.dp),
                        strokeWidth = 2.dp,
                        color = MaterialTheme.colorScheme.onPrimary
                    )
                    Spacer(Modifier.width(8.dp))
                    Text("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
                } else {
                    Icon(
                        imageVector = Icons.Default.Download,
                        contentDescription = null,
                        modifier = Modifier.size(18.dp)
                    )
                    Spacer(Modifier.width(8.dp))
                    Text("–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
                }
            }
            
            // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            if (refreshSuccess) {
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    colors = CardDefaults.cardColors(
                        containerColor = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.5f)
                    )
    ) {
        Row(
                        modifier = Modifier.padding(12.dp),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Icon(
                            imageVector = Icons.Default.CheckCircle,
                            contentDescription = null,
                            tint = MaterialTheme.colorScheme.primary,
                            modifier = Modifier.size(20.dp)
                        )
                        Column {
                            Text(
                                text = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
                                style = MaterialTheme.typography.bodySmall.copy(fontWeight = FontWeight.Bold),
                                color = MaterialTheme.colorScheme.onPrimaryContainer
                            )
                            Text(
                                text = "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...",
                                style = MaterialTheme.typography.bodySmall,
                                color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.8f)
                            )
                        }
                        Spacer(Modifier.weight(1f))
                        IconButton(
                            onClick = onClearStatus,
                            modifier = Modifier.size(24.dp)
                        ) {
                            Icon(
                                imageVector = Icons.Default.Close,
                                contentDescription = "–ó–∞–∫—Ä—ã—Ç—å",
                                modifier = Modifier.size(16.dp)
                            )
                        }
                    }
                }
            }
            
            // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if (refreshError != null) {
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    colors = CardDefaults.cardColors(
                        containerColor = MaterialTheme.colorScheme.errorContainer.copy(alpha = 0.5f)
                    )
                ) {
                    Row(
                        modifier = Modifier.padding(12.dp),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Icon(
                            imageVector = Icons.Default.Error,
                            contentDescription = null,
                            tint = MaterialTheme.colorScheme.error,
                            modifier = Modifier.size(20.dp)
                        )
                        Spacer(Modifier.width(8.dp))
                        Text(
                            text = refreshError,
                            style = MaterialTheme.typography.bodySmall,
                            color = MaterialTheme.colorScheme.onErrorContainer
                        )
                        Spacer(Modifier.weight(1f))
                        IconButton(
                            onClick = onClearStatus,
                            modifier = Modifier.size(24.dp)
                        ) {
                            Icon(
                                imageVector = Icons.Default.Close,
                                contentDescription = "–ó–∞–∫—Ä—ã—Ç—å",
                                modifier = Modifier.size(16.dp)
                            )
                        }
                    }
                }
            }
        }
    }
}

/**
 * –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–±—Ä–∞—Ü–∏–∏ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
 * 
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–∫–ª—é—á–∞—Ç—å/–≤—ã–∫–ª—é—á–∞—Ç—å –≤–∏–±—Ä–∞—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
 * –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–±—É—Å–∞.
 * 
 * @param vibrationEnabled —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–±—Ä–∞—Ü–∏–∏
 * @param onVibrationToggle callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 */
@Composable
private fun VibrationSettingsCard(
    vibrationEnabled: Boolean,
    onVibrationToggle: (Boolean) -> Unit
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = CardDefaults.cardElevation(defaultElevation = 1.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(start = 16.dp, end = 16.dp, top = 12.dp, bottom = 12.dp),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier.weight(1f)
            ) {
                Icon(
                    imageVector = Icons.Default.PhoneAndroid,
                    contentDescription = "–í–∏–±—Ä–∞—Ü–∏—è",
                    tint = MaterialTheme.colorScheme.primary,
                    modifier = Modifier.size(24.dp)
                )
                Spacer(Modifier.width(16.dp))
                Column {
                Text(
                        text = "–í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö",
                        style = MaterialTheme.typography.bodyLarge,
                        color = MaterialTheme.colorScheme.onSurface
                    )
                    Text(
                        text = if (vibrationEnabled) "–í–∫–ª—é—á–µ–Ω–∞" else "–í—ã–∫–ª—é—á–µ–Ω–∞",
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
            }
            Switch(
                checked = vibrationEnabled,
                onCheckedChange = onVibrationToggle
            )
        }
    }
}
